FROM    ubuntu:jammy
LABEL   maintainer="paul@mikadosoftware.com"

ARG     PROXY_CERT 
RUN     test -z "${PROXY_CERT}" || { echo "${PROXY_CERT}" | base64 -d | tee /usr/local/share/ca-certificates/ca-local.crt > /dev/null && update-ca-certificates ; }

# We prepare environment
ARG     TZ=${TZ:-Etc/UTC}
ARG     DEBIAN_FRONTEND=noninteractive
RUN     \
        echo "Timezone and locale" >&2                     \
        && apt-get update                                  \
        && apt-get install -y                              \
          apt-utils                                        \
          software-properties-common                       \
          tzdata                                           \
        && apt-get clean                                   \
        && apt-get autoremove -y                           \
        && rm -rf /tmp/* /var/tmp/*                        \
        && rm -rf /var/lib/apt/lists/* /var/cache/apt/*    \
        && echo "Timezone and locale OK" >&2

# install VNC
RUN     \
        echo "install " >&2       \
        && apt-get update                                  \
        && apt-get install -y --no-install-recommends      \
          libpulse0                                        \
          x11vnc                                           \
          xvfb                                             \
        && apt-get clean                                   \
        && apt-get autoremove -y                           \
        && rm -rf /tmp/* /var/tmp/*                        \
        && rm -rf /var/lib/apt/lists/* /var/cache/apt/*    \
        && echo "install VNC OK" >&2

# xfce4 desktop environment
RUN     \
        echo "Install xfce4 " >&2             \
        && apt-get update                                  \
        && apt-get install -y --no-install-recommends      \
          dbus-x11                                         \
        && apt-get install -y                              \
          xfce4 xfce4-terminal xfce4-eyes-plugin           \
          xfce4-systemload-plugin xfce4-weather-plugin     \
          xfce4-whiskermenu-plugin xfce4-clipman-plugin    \
          xserver-xorg-video-dummy                         \
        && apt-get clean                                   \
        && apt-get autoremove -y                           \
        && rm -rf /tmp/* /var/tmp/*                        \
        && rm -rf /var/lib/apt/lists/* /var/cache/apt/*    \
        && echo "Install xfce4  OK" >&2


# Templates can be added here
# these are replaced with additional templates to enhance dockerfile

{{ user }}

{{ apt }}

{{ baseconfig }}

{{ otherdevtools }}

{{ github_cli }}

#When building a Docker image from the commandline, you can set ARG values using â€“build-arg:
#$ docker build --build-arg some_variable_name=a_value
# We add a simple user with sudo rights
ENV     USERNAME=pbrian
ENV     USERHOME=/home/pbrian
ARG     USR_UID=1000
ARG     USR_GID=5000

RUN     groupadd --gid ${USR_GID} ${USERNAME}                                       
RUN     useradd --uid ${USR_UID} --create-home --gid ${USR_GID} --shell /bin/bash ${USERNAME}
RUN     echo "${USERNAME}:${USERNAME}" | chpasswd                     
RUN     echo ${USERNAME}'     ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers 

# It is useful to have a root account even if dont use it much.
# Remeber this is a local machine dev environment, and root changes will be blown away next container run.
RUN echo 'root:${USERNAME}' | chpasswd

# change user locale settings (see baseconfig)
RUN echo "export LC_ALL=en_GB.UTF-8" >> $USERHOME/.bashrc
RUN echo "export LC_LANGUAGE=en_GB.UTF-8" >> $USERHOME/.bashrc

# This is really just the config settings 
# any secrfets are added via '/var/secrets' volume per run
# as such this is a "safe" image to keep on say a hub
# COPY rcassets/.emacs $USERHOME
# COPY rcassets/.pylintrc $USERHOME
COPY rcassets/.gitconfig $USERHOME
COPY rcassets/.ssh $USERHOME/.ssh
RUN chown -R $USERNAME:$USERNAME $USERHOME/.ssh
RUN chown -R $USERNAME:$USERNAME $USERHOME/.gitconfig

#COPY rcassets/ENTRYPOINT.sh $USERHOME
#COPY rcassets/ENTRYPOINT.sh $USERHOME
#RUN chmod 0777 $USERHOME/ENTRYPOINT.sh




### {{ apt }}

# build the basic development world
RUN apt-get update && \
    apt-get install -y apt-transport-https \
                       build-essential \
                       build-essential \
                       dbus-x11 \
                       dos2unix \
                       fonts-inconsolata \
                       git \
                       openssh-server \
                       software-properties-common \
                       wget curl \
                       x11-apps \
                       && \
	apt-get clean

# We add some tools
RUN     \
        echo "Install some tools" >&2                      \
        && apt-get update                                  \
        && apt-get install -y --no-install-recommends      \
          curl                                             \
          dumb-init                                        \
          figlet                                           \
          jq                                               \
          libnss3-tools                                    \
          mlocate                                          \
          net-tools                                        \
          vim                                              \
          vlc                                              \
          xz-utils                                         \
          zip                                              \
        && apt-get install -y thunar-archive-plugin        \
        && apt-get clean                                   \
        && apt-get autoremove -y                           \
        && rm -rf /tmp/* /var/tmp/*                        \
        && rm -rf /var/lib/apt/lists/* /var/cache/apt/*    \
        && echo "Install some tools OK" >&2

# We install firefox, directly from Mozilla (not from snap)
RUN     \
        echo "Install Firefox from Mozilla" >&2               \
        && apt-get update                                     \
        && add-apt-repository ppa:mozillateam/ppa             \
        && printf '\nPackage: *\nPin: release o=LP-PPA-mozillateam\nPin-Priority: 1001\n' > /etc/apt/preferences.d/mozilla-firefox                     \
        && printf 'Unattended-Upgrade::Allowed-Origins:: "LP-PPA-mozillateam:${distro_codename}";' > /etc/apt/apt.conf.d/51unattended-upgrades-firefox \
        && apt-get update                                     \
        && apt-get install -y firefox --no-install-recommends \
        && apt-get clean                                      \
        && apt-get autoremove -y                              \
        && rm -rf /tmp/* /var/tmp/*                           \
        && rm -rf /var/lib/apt/lists/* /var/cache/apt/*       \
        && echo "Install Firefox from Mozilla OK" >&2




### {{ baseconfig }}

#################### Misc config ##########################
## Locales
# We dont have any languages setup at this point
# 
RUN apt-get update && \
    apt-get install -y locales && \
    locale-gen en_GB.UTF-8 && \
    update-locale LC_ALL=en_GB.UTF-8 LANGUAGE=en_GB.UTF-8 && \
    apt-get clean
    
#these need to be run in user sections
#RUN echo "export LC_ALL=en_GB.UTF-8" >> /home/pbrian/.bashrc
#RUN echo "export LC_LANGUAGE=en_GB.UTF-8" >> /home/pbrian/.bashrc

#THis should now work in our terminal (prints Greek for Thank you)
#python3 -c "print(u''.join([u'\u0395', u'\u03c5', u'\u03c7', u'\u03B1', u'\u03c1', u'\u03B9', u'\u03C3', u'\u03c4', u'\u03c9']))"

## fonts
RUN apt-get -y install fonts-inconsolata

ENV TZ=Europe/London
#not ideal
ENV DEBIAN_FRONTEND=noninteractive
RUN DEBIAN_FRONTEND=noninteractive && \
    apt-get update && \
    apt-get install -y tzdata
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && \
    echo $TZ > /etc/timezone



### {{ otherdevtools }}


### Other Dev Tools
RUN apt-get install -y	whois




### {{ github_cli }}

# from cli github page:
RUN curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
&& chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
&& echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
&& apt update \
&& apt install gh -y






# We add sound
# add root user to group for pulseaudio access
RUN adduser root pulse-access
RUN     printf 'default-server = unix:/run/user/1000/pulse/native\nautospawn = no\ndaemon-binary = /bin/true\nenable-shm = false' > /etc/pulse/client.conf


# Two ports are availables: 5900 for VNC client, and 6080 for browser access via websockify
EXPOSE  5900

# We set localtime
RUN      if [ "X${TZ}" != "X" ] ; then if [ -f /usr/share/zoneinfo/${TZ} ] ; then rm -f /etc/localtime ; ln -s /usr/share/zoneinfo/${TZ} /etc/localtime ; fi ; fi

# And here is the statup script, everything else is in there
COPY    entrypoint.sh /entrypoint.sh
RUN     chmod 755 /entrypoint.sh

# We do some specials
RUN     \
        updatedb ;                                       \
        apt-get clean                                    \
        && apt-get autoremove -y                         \
        && rm -rf /tmp/* /var/tmp/*                      \
        && rm -rf /var/lib/apt/lists/* /var/cache/apt/*

# We change user
USER    ${USERNAME}
WORKDIR /home/${USERNAME}
COPY    functions.sh /home/${USERNAME}/.functions.sh
COPY    bgimage.jpg /usr/share/backgrounds/xfce/bgimage.jpg
RUN     \
        printf 'if [[ $- = *i* ]] ; then test -f ~/.functions.sh && . ~/.functions.sh ; fi' >> /home/${USERNAME}/.bashrc

#ENTRYPOINT [ "/usr/bin/dumb-init", "--", "/entrypoint.sh" ]
ENTRYPOINT [ "/entrypoint.sh" ]
